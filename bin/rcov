#!/usr/bin/env ruby
# -*- coding: iso-8859-1 -*-
# rcov Copyright (c) 2004-2006 Mauricio Fernandez <mfp@acm.org>
#
# rcov originally based on 
# module COVERAGE__ originally (c) NAKAMURA Hiroshi
# module PrettyCoverage originally (c) Simon Strandgaard
#
# rewritten & extended by Mauricio Fernç–£dez <mfp@acm.org>
#
# See LEGAL and LICENSE for additional licensing information.
#
require 'cgi'
require 'rbconfig'
require 'optparse'
require 'ostruct'

SCRIPT_LINES__ = {} unless defined? SCRIPT_LINES__
require 'rcov/version'
require 'rcov/formatters'
require 'rcov/options'

EXTRA_HELP = <<-EOF

You can run several programs at once:
  rcov something.rb somethingelse.rb

The parameters to be passed to the program under inspection can be specified
after --:

  rcov -Ilib -t something.rb -- --theseopts --are --given --to --something.rb

ARGV will be set to the specified parameters after --.
Keep in mind that all the programs are run under the same process
(i.e. they just get Kernel#load()'ed in sequence).

$PROGRAM_NAME (aka. $0) will be set before each file is load()ed if
--replace-progname is used.
EOF

def deprecated(opt)
  puts "#{opt} is now depricated.  Please remove it from you Rakefile or scripts.  It will be removed in the next release."
end

$ORIGINAL_ARGV = ARGV.clone
if (idx = ARGV.index("--"))
  extra_args = ARGV[idx+1..-1]
  ARGV.replace(ARGV[0,idx])
else
  extra_args = []
end

def save_options(options)
  dmp = Marshal.dump(options)
  num = ENV["TEST_ENV_NUMBER"]
  num = 1 if ["", nil].include?(num)
  FileUtils.mkdir_p(options.destdir)
  File.open(File.join(options.destdir, "options.#{num}"), "w") do |f|
    f.write(dmp)
  end
end

begin
  options = Rcov::Options.parse!(ARGV)
  save_options(options) if options.dump
rescue OptionParser::InvalidOption, OptionParser::InvalidArgument, OptionParser::MissingArgument => e
  puts options
  puts
  puts e.message
  exit(-1)
end

unless ARGV[0] or options.aggregate_file && File.file?(options.aggregate_file)
  puts options
  exit
end

# {{{ set loadpath
options.loadpaths.reverse_each{|x| $:.unshift x}

#{{{ require 'rcov': do it only now in order to be able to run rcov on itself
# since we need to set $: before.

require 'rcov'

def rcov_load_aggregate_data(file)
  require 'zlib'
  begin
    old_data = nil
    Zlib::GzipReader.open(file){|gz| old_data = Marshal.load(gz) }
  rescue
    old_data = {}
  end
  old_data || {}
end

def rcov_save_aggregate_data(file)
  require 'zlib'
  Zlib::GzipWriter.open(file) do |f|
    Marshal.dump({:callsites => $rcov_callsite_analyzer, :coverage => $rcov_code_coverage_analyzer}, f)
  end
end

if options.callsites
  if options.aggregate_file
    saved_aggregate_data = rcov_load_aggregate_data(options.aggregate_file)
    if saved_aggregate_data[:callsites]
      $rcov_callsite_analyzer = saved_aggregate_data[:callsites]
    end
  end
  $rcov_callsite_analyzer ||= Rcov::CallSiteAnalyzer.new
  $rcov_callsite_analyzer.install_hook
else
  $rcov_callsite_analyzer = nil
end


if options.aggregate_file
  saved_aggregate_data ||= rcov_load_aggregate_data(options.aggregate_file)
  if saved_aggregate_data[:coverage]
    $rcov_code_coverage_analyzer = saved_aggregate_data[:coverage]
  end
end

$rcov_code_coverage_analyzer ||= Rcov::CodeCoverageAnalyzer.new

# must be registered before test/unit puts its own

# The exception to rethrow after reporting has been handled.
$__rcov_exit_exception = nil

formatters = Rcov::Formatters::Generator.formatters(options)
END {
    $rcov_code_coverage_analyzer.remove_hook
    $rcov_callsite_analyzer.remove_hook if $rcov_callsite_analyzer
    rcov_save_aggregate_data(options.aggregate_file) if options.aggregate_file
    $rcov_code_coverage_analyzer.add_files(formatters)
    $rcov_code_coverage_analyzer.dump_coverage_info(formatters) unless options.skip_execute
    $rcov_code_coverage_analyzer.save_files(formatters) if options.dump

    if options.report_cov_bug_for
        defsite = $rcov_callsite_analyzer.defsite(options.report_cov_bug_for)
        if !defsite
            $stderr.puts <<-EOF
Couldn't find definition site of #{options.report_cov_bug_for}.
Was it executed at all?
EOF
            exit(-1)
        end
        lines, mark_info, count_info = $rcov_code_coverage_analyzer.data(defsite.file)
        puts <<EOF

Please fill in the blanks in the following report.


You can post bugs to
  http://github.com/relevance/rcov/issues

Thank you!
        
=============================================================================
Bug report generated on #{Time.new}

Ruby version:              #{RUBY_VERSION} (#{RUBY_RELEASE_DATE})
Platform:                  #{RUBY_PLATFORM}
rcov version:              #{Rcov::VERSION}
rcovrt loaded?             #{$".any?{|x| /\brcovrt\b/ =~ x} }
using RubyGems?            #{$".any?{|x| /\brubygems\b/ =~ x} }
Command-line arguments:    #{$ORIGINAL_ARGV.inspect}
Coverage analysis bug in:  #{options.report_cov_bug_for}

Line(s) ____________ should be ______ (red/green).
        
Raw coverage information (feel free to remove useless data, but please leave
some context around the faulty lines):

EOF
        defsite.line.upto(SCRIPT_LINES__[defsite.file].size) do |i|
            puts "%7d:%5d:%s" % [count_info[i-1], i, lines[i-1]]
        end
        exit
    end
  if !formatters.empty? and formatters.all?{|formatter| formatter.sorted_file_pairs.empty? }  
        require 'pp'
        $stderr.puts <<-EOF

No file to analyze was found. All the files loaded by rcov matched one of the
following expressions, and were thus ignored:
#{PP.pp(options.skip, "").chomp}

You can solve this by doing one or more of the following:
* rename the files not to be ignored so they don't match the above regexps
* use --include-file to give a list of patterns for files not to be ignored
* use --exclude-only to give the new list of regexps to match against
* structure your code as follows:
      test/test_*.rb  for the test cases
      lib/**/*.rb     for the target source code whose coverage you want
  making sure that the test/test_*.rb files are loading from lib/, e.g. by 
  using the -Ilib command-line argument, adding  
    $:.unshift File.join(File.dirname(__FILE__), "..", "lib")
  to test/test_*.rb, or running rcov via a Rakefile (read the RDoc
  documentation or README.rake in the source distribution).
EOF
    end

    raise $__rcov_exit_exception if $__rcov_exit_exception
}

$rcov_code_coverage_analyzer.install_hook

#{{{ Load scripts
begin
  if RUBY_VERSION =~ /1.9/
    puts "** WARNING: Ruby 1.9 Support is experimental at best. Don't expect correct results! **"
  end
  pending_scripts = ARGV.clone
  ARGV.replace extra_args
  until pending_scripts.empty?
    prog = pending_scripts.shift
    if options.replace_prog_name
      $0 = File.basename(File.expand_path(prog))
    end
    load prog
  end
rescue Object => err
  $__rcov_exit_exception = err
end

__END__
